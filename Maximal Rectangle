class Solution {
public:
    vector<int> nsl(vector<int>& heights){
        stack<pair<int,int>> s;
        vector<int> ans(heights.size());
        for(int i=0; i<heights.size(); i++){
            if(s.empty()) ans[i]=-1;
            else if(s.top().first<heights[i]) ans[i]=s.top().second;
            else{
                while(!s.empty()&&s.top().first>=heights[i]) s.pop();
                if(s.empty()) ans[i]=-1;
                else ans[i]=s.top().second;
            }
            s.push({heights[i],i});
        }
        return ans;
    }
    
    vector<int> nsr(vector<int>& heights){
        stack<pair<int,int>> s;
        vector<int> ans(heights.size());
        for(int i=heights.size()-1;i>=0;i--){
            if(s.empty()) ans[i]=heights.size();
            else if(s.top().first<heights[i]) ans[i]=s.top().second;
            else{
                while(!s.empty()&&s.top().first>=heights[i]) s.pop();
                if(s.empty()) ans[i]=heights.size();
                else ans[i]=s.top().second;
            }
            s.push({heights[i],i});
        }
        return ans;
    }
    
    int largestRectangleArea(vector<int>& heights) {
        vector<int> v_nsr=nsr(heights);
        vector<int> v_nsl=nsl(heights);
        int ans=0;
        for(int i=0;i<heights.size();i++){
            ans=max(ans,(v_nsr[i]-v_nsl[i]-1)*heights[i]);
        }
        return ans;
    }
    
    int maximalRectangle(vector<vector<char>>& matrix) {
        vector<int> v(matrix[0].size());
        int ans=0;
        for(int i=0;i<matrix[0].size();i++){
            if(matrix[0][i]=='1') v[i]=1;
            else v[i]=0;
        }
        ans=largestRectangleArea(v);
        for(int i=1;i<matrix.size();i++){
            
            for(int j=0;j<matrix[i].size();j++){
            if(matrix[i][j]=='1') v[j]++;
            else v[j]=0;
        }
            ans=max(ans,largestRectangleArea(v));      
        }
        return ans;
    }
};
